<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd" >
<sqlMap namespace="wd_domain">
	<resultMap id="DomainResult" class="com.ah3nong.wd.bean.Domain">
		<!-- WARNING - This element is automatically generated by Abator for iBATIS, do not modify. This element was generated on Tue Aug 14 18:25:44 CST 2012. -->
		<result column="id" property="id" jdbcType="INT" />
		<result column="name" property="name" jdbcType="VARCHAR" />
		<result column="parent_id" property="parentId" jdbcType="INT" />
		<result column="node_path" property="nodePath" jdbcType="VARCHAR" />
		<result column="recommended" property="recommended" jdbcType="TINYINT" nullValue="1"/>
		<result column="has_child" property="hasChild" jdbcType="TINYINT" nullValue="0"/>
		<result column="expert_domain" property="expertDomain" jdbcType="INT" nullValue="0"/>
	</resultMap>

	<select id="selectByPrimaryKey" resultMap="DomainResult" parameterClass="com.ah3nong.wd.bean.Domain">
		select id, name, parent_id, node_path,recommended,has_child,expert_domain from wd_domain
		where id = #id:INT#
	</select>

	<select id="selectByNodePath" resultMap="DomainResult" parameterClass="com.ah3nong.wd.bean.Domain">
		select id, name, parent_id, node_path,recommended,has_child,expert_domain from wd_domain
		where node_path = #nodePath:VARCHAR#
	</select>

	<select id="selectAll" resultMap="DomainResult" parameterClass="map">
		select id, name, parent_id, node_path,recommended,has_child,expert_domain from wd_domain
		order by node_path
	</select>

	<select id="selectByParams" resultMap="DomainResult" parameterClass="map">
		select id, name, parent_id, node_path,recommended,has_child,expert_domain from wd_domain
		<dynamic prepend="where">
			<isNotNull prepend="and" property="recommended">
				recommended=#recommended:TINYINT#
			</isNotNull>
			<isNotNull property="parentId">
				and id in 
				(select id from wd_domain
				where left(node_path,2) in (select node_path from wd_domain where parent_id=#parentId#))
			</isNotNull>
		</dynamic>
		<isNotNull property="orderBy">order by $orderBy$</isNotNull>
		<isNotNull property="count">limit #count:INT#</isNotNull>
	</select>

	<select id="selectRecommended" resultMap="DomainResult" parameterClass="map">
		select id, name, parent_id, node_path,recommended,has_child,expert_domain from wd_domain
		where recommended=1 order by node_path
	</select>
	
	<select id="selectChildDomain" resultMap="DomainResult" parameterClass="map">
		select id, name, parent_id, node_path,recommended,has_child,expert_domain from wd_domain
		where node_path like '$nodePath$_%'
	</select>
	
	<select id="selectDomainByName" resultMap="DomainResult" parameterClass="map">
		select id, name, parent_id, node_path,recommended ,has_child,expert_domain from wd_domain
		where name=#name:VARCHAR# and parent_id=#parentId:INT#
		order by node_path
	</select>
	<select id="selectDomainByNameForFirst" resultMap="DomainResult" parameterClass="map">
		select id, name, parent_id, node_path,recommended,has_child,expert_domain from wd_domain
		where name=#name:VARCHAR# and <![CDATA[parent_id<0]]>
		order by node_path
	</select>
	<delete id="deleteByPrimaryKey" parameterClass="com.ah3nong.wd.bean.Domain">
		delete from wd_domain where id = #id:INT#
	</delete>
	
	<delete id="deleteByNodePath" parameterClass="com.ah3nong.wd.bean.Domain">
		delete from wd_domain where node_path like '$nodePath$%'
	</delete>

	<insert id="insert" parameterClass="com.ah3nong.wd.bean.Domain">
		insert into wd_domain (id, name, parent_id,
		node_path,recommended , has_child) values (#id:INT#, #name:VARCHAR#,
		#parentId:INT#, #nodePath:VARCHAR#, #recommended:TINYINT# ,0)
		<selectKey keyProperty="id" resultClass="java.lang.Integer">
			SELECT @@IDENTITY AS id
		</selectKey>
	</insert>

	<update id="updateByPrimaryKey" parameterClass="com.ah3nong.wd.bean.Domain">
		update wd_domain set name = #name:VARCHAR#, parent_id =
		#parentId:INT#, node_path = #nodePath:VARCHAR#, recommended =
		#recommended:TINYINT# where
		id = #id:INT#
	</update>
	<update id="updateByPrimaryKeySelective" parameterClass="com.ah3nong.wd.bean.Domain">
		update wd_domain
		<dynamic prepend="set">
			<isNotNull prepend="," property="name">
				name = #name:VARCHAR#
			</isNotNull>
			<isNotNull prepend="," property="parentId">
				parent_id = #parentId:INT#
			</isNotNull>
			<isNotNull prepend="," property="nodePath">
				node_path = #nodePath:VARCHAR#
			</isNotNull>
			<isNotNull prepend="," property="recommended">
				recommended = #recommended:TINYINT#
			</isNotNull>
			<isNotNull prepend="," property="hasChild">
				has_child = #hasChild:TINYINT#
			</isNotNull>
		</dynamic>
		where id = #id:INT#
	</update>
	<select id="countAll" parameterClass="map" resultClass="java.lang.Integer">
		select count(*) from wd_domain
	</select>

	<select id="selectPaginationByPageNum" resultMap="DomainResult" parameterClass="map">
		select id,name, parent_id, node_path,recommended ,has_child,expert_domain from wd_domain
		<dynamic prepend="where">
			<isNotEmpty prepend="and" property="id">
				id = #id#
			</isNotEmpty>
			<isNotEmpty prepend="and" property="name">
				name like '%$name$%'
			</isNotEmpty>
			<isNotEmpty prepend="and" property="parentId">
				parent_id = #parentId#
			</isNotEmpty>
			<isNotEmpty prepend="and" property="nodePath">
				node_path like '%$nodePath$%'
			</isNotEmpty>
			<isNotEmpty prepend="and" property="recommended">
				recommended = #recommended#
			</isNotEmpty>
		</dynamic>
		order by node_path limit #start#,#size#
	</select>
	<select id="countPaginationByPageNum" resultClass="java.lang.Integer" parameterClass="map">
		select count(id) from wd_domain
		<dynamic prepend="where">
			<isNotEmpty prepend="and" property="id">
				id = #id#
			</isNotEmpty>
			<isNotEmpty prepend="and" property="name">
				name like '%$name$%'
			</isNotEmpty>
			<isNotEmpty prepend="and" property="parentId">
				parent_id = #parentId#
			</isNotEmpty>
			<isNotEmpty prepend="and" property="nodePath">
				node_path like '%$nodePath$%'
			</isNotEmpty>
			<isNotEmpty prepend="and" property="recommended">
				recommended = #recommended#
			</isNotEmpty>
		</dynamic>
		order by id
	</select>
	<select id="selectAllByPageNum" resultMap="DomainResult" parameterClass="map">
		select id,name, parent_id, node_path,recommended,has_child,expert_domain from wd_domain
		<dynamic prepend="where">
			<isNotEmpty prepend="and" property="id">
				id = #id#
			</isNotEmpty>
			<isNotEmpty prepend="and" property="name">
				name like '%$name$%'
			</isNotEmpty>
			<isNotEmpty prepend="and" property="parentId">
				parent_id = #parentId#
			</isNotEmpty>
			<isNotEmpty prepend="and" property="nodePath">
				node_path like '%$nodePath$%'
			</isNotEmpty>
			<isNotEmpty prepend="and" property="recommended">
				recommended = #recommended#
			</isNotEmpty>
		</dynamic>
		order by id
	</select>

	<select id="selectMaxNodePath" parameterClass="java.lang.Integer" resultClass="java.lang.String">
		select max(node_path) from wd_domain where
		parent_id=#parentId:INT#
	</select>

	<select id="selectFirstMaxNodePath" resultClass="java.lang.String">
		select max(node_path) from wd_domain where <![CDATA[parent_id<0]]>
	</select>
	<!-- 获得一级领域以及该领域下面所有专家的数量 -->
	<select id="selectDomainAndAllExperts" resultClass="java.util.HashMap" parameterClass="map" remapResults="true">
		select a.id as id ,a.name as name,count(distinct b.user_id) as
		count from wd_domain a
		left join (select
		d.id,d.node_path,ud.user_id from wd_domain d,wd_user_domain
		ud,wd_expert e where d.id=ud.domain_id and ud.user_id=e.id) b on
		a.node_path=left(b.node_path,2) 
		where 
		<![CDATA[a.parent_id<0]]>
		group by a.id
	</select>
	
	<select id="selectAllChildDomains" resultMap="DomainResult" parameterClass="map">
		select id,name, parent_id, node_path,recommended ,has_child,expert_domain from wd_domain
		where node_path like '$nodePath$%'
	</select>
	<!-- 获得用户关注领域 -->
	<select id="selectDomainByUserAskQuestion" resultClass="java.util.HashMap"
		parameterClass="map" remapResults="true">
		select d.name as name ,d.id as id from wd_domain d ,
		(select domain_id ,count(*) as count  from wd_question 
		where user_id = #userId# group by domain_id  order by count desc limit #count#)q
		where d.id=q.domain_id
	</select>
	<select id="selectAllDomainsByParentId" resultMap="DomainResult"
		parameterClass="map"  >
		select id, name, parent_id, node_path,recommended,has_child,expert_domain from wd_domain
		where left(node_path,2) in (select node_path from wd_domain where parent_id=#parentId#) order by node_path
	</select>
</sqlMap>